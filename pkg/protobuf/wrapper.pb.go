// copied from https://adc.github.trendmicro.com/XDR/xlogr-data-wrapper

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: wrapper.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Wrapper_DATA_SCHEMA int32

const (
	Wrapper_COMMON  Wrapper_DATA_SCHEMA = 0
	Wrapper_UNIFIED Wrapper_DATA_SCHEMA = 1
	Wrapper_LUWAK   Wrapper_DATA_SCHEMA = 2
	Wrapper_OTHERS  Wrapper_DATA_SCHEMA = 3
	Wrapper_CSV     Wrapper_DATA_SCHEMA = 4
)

// Enum value maps for Wrapper_DATA_SCHEMA.
var (
	Wrapper_DATA_SCHEMA_name = map[int32]string{
		0: "COMMON",
		1: "UNIFIED",
		2: "LUWAK",
		3: "OTHERS",
		4: "CSV",
	}
	Wrapper_DATA_SCHEMA_value = map[string]int32{
		"COMMON":  0,
		"UNIFIED": 1,
		"LUWAK":   2,
		"OTHERS":  3,
		"CSV":     4,
	}
)

func (x Wrapper_DATA_SCHEMA) Enum() *Wrapper_DATA_SCHEMA {
	p := new(Wrapper_DATA_SCHEMA)
	*p = x
	return p
}

func (x Wrapper_DATA_SCHEMA) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Wrapper_DATA_SCHEMA) Descriptor() protoreflect.EnumDescriptor {
	return file_wrapper_proto_enumTypes[0].Descriptor()
}

func (Wrapper_DATA_SCHEMA) Type() protoreflect.EnumType {
	return &file_wrapper_proto_enumTypes[0]
}

func (x Wrapper_DATA_SCHEMA) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Wrapper_DATA_SCHEMA) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Wrapper_DATA_SCHEMA(num)
	return nil
}

// Deprecated: Use Wrapper_DATA_SCHEMA.Descriptor instead.
func (Wrapper_DATA_SCHEMA) EnumDescriptor() ([]byte, []int) {
	return file_wrapper_proto_rawDescGZIP(), []int{0, 0}
}

type Wrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload        []byte  `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	FilePath       *string `protobuf:"bytes,2,opt,name=filePath" json:"filePath,omitempty"` // for package larger than 1MB
	ProductCode    *string `protobuf:"bytes,3,req,name=productCode" json:"productCode,omitempty"`
	TraceId        *string `protobuf:"bytes,4,req,name=traceId" json:"traceId,omitempty"`
	CustomerId     *string `protobuf:"bytes,5,req,name=customerId" json:"customerId,omitempty"`
	SenderId       *string `protobuf:"bytes,6,opt,name=senderId" json:"senderId,omitempty"` // who send the log package
	Encoding       *string `protobuf:"bytes,7,req,name=encoding" json:"encoding,omitempty"`
	Snapshot       *bool   `protobuf:"varint,8,opt,name=snapshot" json:"snapshot,omitempty"`             // for static data
	Type           *string `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`                      // for static data
	ProductId      *string `protobuf:"bytes,10,opt,name=productId" json:"productId,omitempty"`           // for EDL backward compatible
	ReceivedTime   *uint64 `protobuf:"varint,11,opt,name=receivedTime" json:"receivedTime,omitempty"`    // unixtime in millisecond
	PackagePath    *string `protobuf:"bytes,12,opt,name=packagePath" json:"packagePath,omitempty"`       // for package store on cloud storage
	SenderName     *string `protobuf:"bytes,13,opt,name=senderName" json:"senderName,omitempty"`         // sender Name, ex: CloudEndpointService
	SenderVersion  *string `protobuf:"bytes,14,opt,name=senderVersion" json:"senderVersion,omitempty"`   // sender Version
	SenderPlatform *string `protobuf:"bytes,15,opt,name=senderPlatform" json:"senderPlatform,omitempty"` // sender Platform, ex: Windows, Linux, macOS
	SourceId       *string `protobuf:"bytes,16,opt,name=sourceId" json:"sourceId,omitempty"`             // who generate the logs
	// Deprecated: Marked as deprecated in wrapper.proto.
	SourceGroupId *string              `protobuf:"bytes,17,opt,name=sourceGroupId" json:"sourceGroupId,omitempty"`                              // for Management Scope
	ExtraInfo     []byte               `protobuf:"bytes,18,opt,name=extraInfo" json:"extraInfo,omitempty"`                                      // extra rich information, bytes type for more flexible format, like JSON, protobuf, etc..
	DataSchema    *Wrapper_DATA_SCHEMA `protobuf:"varint,19,opt,name=dataSchema,enum=protobuf.Wrapper_DATA_SCHEMA" json:"dataSchema,omitempty"` // what is the schema in the payload
	Batch         *bool                `protobuf:"varint,20,opt,name=batch" json:"batch,omitempty"`                                             // the payload is endOfBatch
	RedisKey      *string              `protobuf:"bytes,21,opt,name=redisKey" json:"redisKey,omitempty"`                                        // The key id where the raw log locate in Reids
	// The Redis endpoint SSM Name where the raw log (payload) will use to put to Redis.
	// Allow ETL, Archiver, Forwarder to get correct Redis Client from map based on this name
	RedisClusterName    *string `protobuf:"bytes,22,opt,name=redisClusterName" json:"redisClusterName,omitempty"`
	CoupledTraceId      *string `protobuf:"bytes,23,opt,name=coupledTraceId" json:"coupledTraceId,omitempty"`            // log coupler trace id for invoking lambdas
	CouplerReceivedTime *int64  `protobuf:"varint,24,opt,name=couplerReceivedTime" json:"couplerReceivedTime,omitempty"` // log coupler received time in millisecond
	CouplerSinkTime     *int64  `protobuf:"varint,25,opt,name=couplerSinkTime" json:"couplerSinkTime,omitempty"`         // log coupler sink to lambdas time in millisecond
	FastTrack           *bool   `protobuf:"varint,26,opt,name=fastTrack" json:"fastTrack,omitempty"`                     // is fast track log
	LogReceivedTime     *int64  `protobuf:"varint,27,opt,name=logReceivedTime" json:"logReceivedTime,omitempty"`         // xLogR received time in millisecond, same as receivedTime, receivedTime will be deprecated soon
}

func (x *Wrapper) Reset() {
	*x = Wrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wrapper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wrapper) ProtoMessage() {}

func (x *Wrapper) ProtoReflect() protoreflect.Message {
	mi := &file_wrapper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wrapper.ProtoReflect.Descriptor instead.
func (*Wrapper) Descriptor() ([]byte, []int) {
	return file_wrapper_proto_rawDescGZIP(), []int{0}
}

func (x *Wrapper) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Wrapper) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

func (x *Wrapper) GetProductCode() string {
	if x != nil && x.ProductCode != nil {
		return *x.ProductCode
	}
	return ""
}

func (x *Wrapper) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *Wrapper) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *Wrapper) GetSenderId() string {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return ""
}

func (x *Wrapper) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

func (x *Wrapper) GetSnapshot() bool {
	if x != nil && x.Snapshot != nil {
		return *x.Snapshot
	}
	return false
}

func (x *Wrapper) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Wrapper) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

func (x *Wrapper) GetReceivedTime() uint64 {
	if x != nil && x.ReceivedTime != nil {
		return *x.ReceivedTime
	}
	return 0
}

func (x *Wrapper) GetPackagePath() string {
	if x != nil && x.PackagePath != nil {
		return *x.PackagePath
	}
	return ""
}

func (x *Wrapper) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *Wrapper) GetSenderVersion() string {
	if x != nil && x.SenderVersion != nil {
		return *x.SenderVersion
	}
	return ""
}

func (x *Wrapper) GetSenderPlatform() string {
	if x != nil && x.SenderPlatform != nil {
		return *x.SenderPlatform
	}
	return ""
}

func (x *Wrapper) GetSourceId() string {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return ""
}

// Deprecated: Marked as deprecated in wrapper.proto.
func (x *Wrapper) GetSourceGroupId() string {
	if x != nil && x.SourceGroupId != nil {
		return *x.SourceGroupId
	}
	return ""
}

func (x *Wrapper) GetExtraInfo() []byte {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *Wrapper) GetDataSchema() Wrapper_DATA_SCHEMA {
	if x != nil && x.DataSchema != nil {
		return *x.DataSchema
	}
	return Wrapper_COMMON
}

func (x *Wrapper) GetBatch() bool {
	if x != nil && x.Batch != nil {
		return *x.Batch
	}
	return false
}

func (x *Wrapper) GetRedisKey() string {
	if x != nil && x.RedisKey != nil {
		return *x.RedisKey
	}
	return ""
}

func (x *Wrapper) GetRedisClusterName() string {
	if x != nil && x.RedisClusterName != nil {
		return *x.RedisClusterName
	}
	return ""
}

func (x *Wrapper) GetCoupledTraceId() string {
	if x != nil && x.CoupledTraceId != nil {
		return *x.CoupledTraceId
	}
	return ""
}

func (x *Wrapper) GetCouplerReceivedTime() int64 {
	if x != nil && x.CouplerReceivedTime != nil {
		return *x.CouplerReceivedTime
	}
	return 0
}

func (x *Wrapper) GetCouplerSinkTime() int64 {
	if x != nil && x.CouplerSinkTime != nil {
		return *x.CouplerSinkTime
	}
	return 0
}

func (x *Wrapper) GetFastTrack() bool {
	if x != nil && x.FastTrack != nil {
		return *x.FastTrack
	}
	return false
}

func (x *Wrapper) GetLogReceivedTime() int64 {
	if x != nil && x.LogReceivedTime != nil {
		return *x.LogReceivedTime
	}
	return 0
}

var File_wrapper_proto protoreflect.FileDescriptor

var file_wrapper_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0xea, 0x07, 0x0a, 0x07, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x69, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x70,
	0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f,
	0x75, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46,
	0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x55, 0x57, 0x41, 0x4b, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x53, 0x56, 0x10, 0x04, 0x42, 0x2c, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x61, 0x65, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65,
}

var (
	file_wrapper_proto_rawDescOnce sync.Once
	file_wrapper_proto_rawDescData = file_wrapper_proto_rawDesc
)

func file_wrapper_proto_rawDescGZIP() []byte {
	file_wrapper_proto_rawDescOnce.Do(func() {
		file_wrapper_proto_rawDescData = protoimpl.X.CompressGZIP(file_wrapper_proto_rawDescData)
	})
	return file_wrapper_proto_rawDescData
}

var file_wrapper_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wrapper_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wrapper_proto_goTypes = []any{
	(Wrapper_DATA_SCHEMA)(0), // 0: protobuf.Wrapper.DATA_SCHEMA
	(*Wrapper)(nil),          // 1: protobuf.Wrapper
}
var file_wrapper_proto_depIdxs = []int32{
	0, // 0: protobuf.Wrapper.dataSchema:type_name -> protobuf.Wrapper.DATA_SCHEMA
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_wrapper_proto_init() }
func file_wrapper_proto_init() {
	if File_wrapper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wrapper_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Wrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wrapper_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wrapper_proto_goTypes,
		DependencyIndexes: file_wrapper_proto_depIdxs,
		EnumInfos:         file_wrapper_proto_enumTypes,
		MessageInfos:      file_wrapper_proto_msgTypes,
	}.Build()
	File_wrapper_proto = out.File
	file_wrapper_proto_rawDesc = nil
	file_wrapper_proto_goTypes = nil
	file_wrapper_proto_depIdxs = nil
}
